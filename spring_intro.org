#+TITLE:     An Short Introduction to Spring Framework
#+AUTHOR:    Hai Qian
#+EMAIL:     qianh1@gpopivotal
#+DATE:      2013-07-12 Fri

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t ltoc:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]

#+BEAMER_FRAME_LEVEL: 2

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* Introduction
  
** Introduction
The Spring Framework is an open source application framework and
inversion of control container for the Java platform.
:PROPERTIES:
:BEAMER_envargs: [<+->]
:END:
- Java and XML configurations
- Core module: dependency injection
- Important module: Aspect oriented programming
- Many modules
- IDE: Spring tool suite (based on Eclipse)

** Structure of Spring Framework
#+begin_center
#+LaTeX:\includegraphics[width=0.9\textwidth]{/Users/qianh1/workspace/spring/spring_structure.png}
#+end_center

* Dependency Injection

** Dependency Injection (DI)

- You have a class, it has a private field (set to null) and you declare
  a public setter that provides the value for that field. In other
  words, the dependency of the class (the field) is being injected by an
  external class (via the setter or contructor). 

#+BEAMER: \pause

- Dependency injection is a software design pattern that allows the
  removal of hard-coded dependencies and makes it possible to change
  them, whether at run-time or compile-time. 

** Example of DI (step 1)
#+begin_src java
public abstract class Shape {

    public abstract double getArea();
    
    public void printInfo() {
        System.out.printf("%s with area of %,.2f%n",
                          getClass().getSimpleName(),
                          getArea();
    }
}
#+end_src

** Example of DI (step 2)
Concrete class 1
#+begin_src java
public class Rectangular extends Shape {
    private double length, width;

    public Rectangular () {}

    public Rectangular (double length, double width) {
        setLength(length);
        setWidth(width);
    }
#+end_src 

** Example of DI (step 2 continued)
#+begin_src java
    public double getLength() {
        return (length);
    }
    public void setLength (double length) {
        this.length = length;
    }
    public double getWidth() {
        return (width);
    }
    public void setWidth (double width) {
        this.width = width;
    }
    public double getArea () {
        return (length * width)
    }
}
#+end_src

** Example of DI (step 2 continued)
Concrete class 2
#+begin_src java
public class Circle extends Shape {
    private double radius = 1.0;

    public Circle () {}

    public Circle (double radius) {
        setRadius (radius);
    }
#+end_src 

** Example of DI (step 2 continued)
#+begin_src java
    public double getRadius () {
        return (radius);
    }

    public void setRadius (double radius) {
        this.radius = radius;
    }

    public double getArea () {
        return (Math.PI * radius * radius);
    }
}
#+end_src 

** Example of DI (step 3: Bean Definition)
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<bean xmlns="http://wwwspringgframework.org/schema/beans"
  xmlns:xsi="http://www.we.org/2001/XMLSchema-instance"
  xsl:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd">

<bean id="shape1" class="Rectangle">
  <property name="length" value="10"/>
  <property name="width" value="20"/>
</bean>

...
</beans>
#+end_src

** Example of DI (step 4)
#+begin_src java
public class ShapeList {
    private List<Shape> shapes;
    public ShapList (Shape shape) {
        shapes = Arrays.asList(shape);
    }
    public ShapeList (List<Shape> shapes) {
        this.shapes = shapes;
    }
    public List<Shape> getShapes () {
        return shapes;
    }
    public void setShapes (List<Shape> shapes) {
        this.shapes = shapes;
    }
#+end_src

** Example of DI (step 4 continued)
#+begin_src java
public double getTotalArea () {
    double total = 0.0;
    for (Shape shape : shapes) {
        total = total + shape.getArea();
    }
    return (total);
}
#+end_src

** Example of DI (step 5 Bean definition)
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
...
<bean id="shapeList1" class="ShapeList">
  <constructor-arg ref="shape1"/>
</bean>
<bean id="shapeList2" class="ShapeList">
  <constructor-arg>
    <list>
      <ref local="shape2"/>
      <bean class="Rectangle">
        <property name="length" value="10"/>
        <property name="width" value="5"/>
      </bean>
      <bean class="Circle">
        <constructor-arg value="25"/>
      </bean>
    </list>
  </constructor-arg>
</bean>
#+end_src

** Example of DI (step 6 Driver class)
#+begin_src java
public class ShapeTest {
    public static void main (String[] args) {
        ApplicationContext context = new 
           ClassPathXmlApplicationContex
            ("/applicationContext.xml")
        ShapeList shapes = 
          (ShapeList) context.getBean("shapeList1");
    }
}
#+end_src

** Spring and Relational Database
#+begin_src xml
<bean class="org.apache.commons.dbcp.BasicDataSource" 
   id="dataSource">
    <property name="driverClassName" 
       value="com.mysql.jdbc.Driver"/>
    <property name="url" 
       value="jdbc:mysql://localhost:3306/inventory-db"/>
    <property name="username" value="myuser"/>
    <property name="password" value="mypass"/>
</bean>
#+end_src

** Spring and Cloud Foundry
Include the cloud name space
#+begin_src xml
<cloud:mongo-db-factory id="mongoDbFactory">
 
<bean id="mongoTemplate" 
  class="org.springframework.data.mongodb.core.MongoTemplate">
   <constructor-arg ref="mongoDbFactory"/>
</bean>
#+end_src

** Spring and Cloud Foundry (Continued)
Include a namespace element (an example)
#+begin_src xml
<cloud:data-source id="dataSource" />
 
<bean id="jdbcTemplate" 
  class="org.springframework.jdbc.core.JdbcTemplate">
  <property name="dataSource" ref="dataSource" />
</bean>
#+end_src

** Why Spring
- Spring is a framework that helps you to "wire" different components
  together. It is most useful in cases where you have a lot of
  components and you might decide to combine them in different ways, or
  wish to make it easy to swap out one component for another depending
  on different settings or environments
#+BEAMER: \pause
- Easier testing
#+BEAMER: \pause
- Easier access to other services
